import logging

from rest_framework import status
from rest_framework.response import Response
from rest_framework.views import APIView

from auth_app.serializers.login_serializer import OTPLoginSerializer, OTPVerificationSerializer

logger = logging.getLogger(__name__)


class OTPLoginView(APIView):
    """
    既存ユーザーのログイン処理
    """

    def post(self, request, *args, **kwargs):
        """
        1. ユーザー名とパスワードで認証
        2. 認証成功後、OTP 検証ステップへ進む
        """
        serializer = OTPLoginSerializer(data=request.data)
        if not serializer.is_valid():
            logger.warn("Invalid login request")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        user = serializer.validated_data["user"]
        response = Response(
            {
                "message": "Use the OTP generated by your authentication app to complete the login process."
            },
            status=status.HTTP_200_OK,
        )

        response.set_cookie(
            key="email",
            value=user.email,
            httponly=True,
            secure=True,
            path="/",
            max_age=300,
        )

        logger.info(f"OTP login initiated for user: {user.email}")
        return response


class OTPLoginVerificationView(APIView):
    """
    OTP の検証
    """

    def post(self, request, *args, **kwargs):
        serializer = OTPVerificationSerializer(data=request.data)
        if not serializer.is_valid():
            logger.warn("Invalid OTP request")
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        user = serializer.validated_data["user"]

        response = Response(
            {
                "access": "generated_access_token",
                "refresh": "generated_refresh_token",
            },
            status=status.HTTP_200_OK,
        )

        response.delete_cookie("email", path="/")

        logger.info(f"OTP verified successfully for user: {user.email}")
        return response