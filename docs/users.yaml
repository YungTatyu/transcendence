openapi: 3.0.3

info: 
  title: Users API
  description: |
    UsersサービスのAPIを提供。このAPIは、ユーザー管理に関連する操作をサポート。
  version: 1.0.0

servers:
  - url: https://user.transcen.com

paths:
  /users:
    get:
      summary: "クエリパラメータでユーザーを検索"
      description: "指定されたパラメータでユーザー情報を取得"
      tags:
        - Users
      parameters:
      - name: query
        in: query
        description: "検索条件（usernameまたはuserid）"
        required: true
        schema:
          oneOf:
            - type: object
              properties:
                username:
                  type: string
            - type: object
              properties:
                userid:
                  type: integer
      responses:
        "200":
          description: "ユーザー情報の取得に成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  username:
                    type: string
                  avatarPath:
                    type: string
                    description: "アバター画像のパス"
                    example: "/uploads/avatars/12345.png"
        "400":
          description: "Missing or invalid query parameter."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "query parameter 'username' or 'userid' is required."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "User not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "エラーの詳細"
                    example: "User not found."
    post:
      summary: "userの新規作成"
      description: "userの新規登録。authサービスからこのapiが叩かれる。"
      tags:
        - Users
      security:
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: "新規ユーザーのusername"
              required:
                - username
      responses:
        "201":
          description: "user作成成功"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "12345"
                  username:
                    type: string
                    example: "johndoe"
        "400":
          description: "入力データが無効"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "発生したエラーの詳細"
                    example: "Username is invalid."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "想定していないクライアントからのリクエストの場合は、endpointを隠す"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Page not found."
        "409":
          description: "Conflict - userが既に存在している"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "コンフリクトエラーの詳細"
                    example: "A user with this email already exists."

  /users/me/username:
    put:
      summary: "usernameの更新"
      description: "認証済みユーザのusernameを更新"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        "200":
          description: "Username updated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: "更新後のユーザー名。"
                    example: "updated_username"
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "409":
          description: "Conflict - usernameが既に存在している"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "コンフリクトエラーの詳細"
                    example: "A username is already used."
  /users/me/avatar:
    put:
      summary: "ユーザのアバターを更新"
      description: "認証済みユーザーのアバター画像をアップロード"
      tags:
        - Users
      requestBody:
        required: true
        content:
          # ファイルやテキストデータを含めることができ、ファイルアップロード時などに使用される一般的な形式
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: "新しいアバター画像ファイル（PNGやJPEGなど）"
      responses:
        "200":
          description: "アバターが正常に更新"
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarPath:
                    type: string
                    description: "更新されたアバター画像のパス"
                    example: "/uploads/avatars/12345.png"
        "400":
          description: "アバター画像が無効"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid image format."
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
    delete:
      summary: "認証済みユーザーのアバターを削除"
      description: "認証済みユーザーのアバターを削除し、データベースのアバターパスをリセットします。"
      tags:
        - Users
      responses:
        "204":
          description: "アバターを正常に削除"
          content: {}
        "401":
          $ref: '#/components/responses/UnauthorizedResponse'
        "404":
          description: "Avatar not found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: "エラーの詳細"
                    example: "Avatar not found."

  /health:
    get:
      summary: ヘルスチェック用エンドポイント
      description: dockerコンテナ立ち上げ時のヘルスチェックなど
      operationId: healthCheck
      tags:
        - Users
      responses:
        '200':
          description: サーバーが正常に稼働中
          content:
            application/json:
              example:
                "status": "healthy"
        '500':
          description: サーバーが正常に稼働していない
          content:
            application/json:
              example:
                "status": "unhealthy"
      security: []

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          description: "認証エラーの詳細"
          example: "JWT is invalid or expired."

  responses:
    UnauthorizedResponse:
      description: "Unauthorized - Missing or invalid JWT."
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
