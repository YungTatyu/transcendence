services:
  auth:
    build: ./auth_service
    container_name: auth_app
    networks:
      - app_network
    depends_on:
      - auth_db
      - auth_redis
    env_file: ./docker_env/auth.env
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  auth_db:
    image: postgres:15
    container_name: auth_db
    env_file: ./docker_env/auth_db.env
    networks:
      - app_network
    volumes:
      - auth_db_data:/var/lib/postgresql/data

  auth_redis:
    image: redis:alpine
    container_name: auth_redis_server
    networks:
      - app_network

  auth_proxy:
    build: ./waf_proxy_service
    container_name: auth_proxy_server
    hostname: auth-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8005:8005"
    env_file: ./docker_env/auth.env
    restart: always
    depends_on:
      - auth
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://auth-proxy.transcen.com:8005/health"]
    volumes:
      - ./certs/auth-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/auth-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  game:
    build: ./game_service
    container_name: game
    env_file: ./docker_env/game.env
    networks:
      - app_network
    depends_on:
      - game_redis
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  game_redis:
    image: redis:alpine
    container_name: game_redis_server
    networks:
      - app_network

  game_proxy:
    build: ./waf_proxy_service
    container_name: game_proxy_server
    hostname: game-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8004:8004"
    env_file: ./docker_env/game.env
    restart: always
    depends_on:
      - game
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://game-proxy.transcen.com:8004/health"]
    volumes:
      - ./certs/game-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/game-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  tournament:
    build: ./tournament_service
    container_name: tournament
    env_file: ./docker_env/tournament.env
    networks:
      - app_network
    depends_on:
      - tournament_db
      - tournament_redis
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  tournament_db:
    image: postgres:15
    container_name: tournament_db
    env_file: ./docker_env/tournament_db.env
    networks:
      - app_network
    volumes:
      - tournament_db_data:/var/lib/postgresql/data

  tournament_redis:
    image: redis:alpine
    container_name: tournament_redis
    networks:
      - app_network
  
  tournament_proxy:
    build: ./waf_proxy_service
    container_name: tournament_proxy_server
    hostname: tournament-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8006:8006"
    env_file: ./docker_env/tournament.env
    restart: always
    depends_on:
      - tournament
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://tournament-proxy.transcen.com:8006/health"]
    volumes:
      - ./certs/tournament-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/tournament-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  user:
    build: ./user_service
    container_name: user_app
    networks:
      - app_network
    depends_on:
      - user_db
    env_file: ./docker_env/user.env
    volumes:
      - user_media:/app/user_app/media/
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro
     
  user_db:
    image: postgres:15
    container_name: user_db
    env_file: ./docker_env/user_db.env
    networks:
      - app_network
    volumes:
      - user_db_data:/var/lib/postgresql/data

  user_proxy:
    build: ./waf_proxy_service
    container_name: user_proxy_server
    hostname: user-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8009:8009"
    env_file: ./docker_env/user.env
    restart: always
    depends_on:
      - user
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://user-proxy.transcen.com:8009/health"]
    volumes:
      - ./certs/user-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/user-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro
      - user_media:/var/www/media/
      - ./user_service/default.conf.template:/etc/nginx/templates/conf.d/default.conf.template:ro
  
  friends_activity:
    build: ./friends_activity_service
    container_name: friends_activity_app
    env_file: ./docker_env/friends_activity.env
    networks:
      - app_network
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  friends_activity_proxy:
    build: ./waf_proxy_service
    container_name: friends_activity_proxy_server
    hostname: friends-activity-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "10001:10001"
    env_file: ./docker_env/friends_activity.env
    restart: always
    depends_on:
      - friends_activity
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://friends-activity-proxy.transcen.com:10001/health"]
    volumes:
      - ./certs/friends-activity-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/friends-activity-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  friends:
    build: ./friends_service
    container_name: friends
    env_file: ./docker_env/friends.env
    networks:
      - app_network
    depends_on:
      - friends_db
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  friends_db:
    image: postgres:15
    container_name: friends_db
    env_file: ./docker_env/friends_db.env
    networks:
      - app_network
    volumes:
      - friends_db_data:/var/lib/postgresql/data

  friends_proxy:
    build: ./waf_proxy_service
    container_name: friends_proxy_server
    hostname: friends-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8007:8007"
    env_file: ./docker_env/friends.env
    restart: always
    depends_on:
      - friends
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://friends-proxy.transcen.com:8007/health"]
    volumes:
      - ./certs/friends-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/friends-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  match:
    build: ./match_service
    container_name: match
    env_file: ./docker_env/match.env
    networks:
      - app_network
    depends_on:
      - match_db
      - match_redis
    volumes:
      - ./certs/client.crt:/certs/client.crt:ro
      - ./certs/client.key:/certs/client.key:ro
      - ./certs/ca.crt:/certs/ca.crt:ro

  match_db:
    image: postgres:15
    container_name: match_db
    env_file: ./docker_env/match_db.env
    networks:
      - app_network
    volumes:
      - match_db_data:/var/lib/postgresql/data

  match_redis:
    image: redis:alpine
    container_name: match_redis
    networks:
      - app_network

  match_proxy:
    build: ./waf_proxy_service
    container_name: match_proxy_server
    hostname: match-proxy.transcen.com
    networks:
      - app_network
    ports:
      - "8008:8008"
    env_file: ./docker_env/match.env
    restart: always
    depends_on:
      - match
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://match-proxy.transcen.com:8008/health"]
    volumes:
      - ./certs/match-proxy.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/match-proxy.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  vault:
    build: ./vault_service
    container_name: vault
    hostname: vault
    networks:
      - app_network
    env_file: ./docker_env/vault.env
    volumes:
      - ./certs/client.crt:/vault/certs/client.crt:ro
      - ./certs/client.key:/vault/certs/client.key:ro
      - ./certs/vault/server.crt:/vault/certs/server.crt:ro
      - ./certs/vault/server.key:/vault/certs/server.key:ro
      - ./certs/ca.crt:/vault/certs/ca.crt:ro

  spa_nginx:
    image: nginx:alpine
    container_name: spa_nginx
    hostname: www.transcen.com
    ports:
      - "443:443"
    networks:
      - app_network
    volumes:
      - ./spa:/usr/share/nginx/html:ro
      - ./spa/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs/www.transcen.com/server.crt:/etc/nginx/ssl/server.crt:ro
      - ./certs/www.transcen.com/server.key:/etc/nginx/ssl/server.key:ro

  spa_nginx_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: spa_nginx_exporter
    networks:
      - app_network
    depends_on:
      - spa_nginx
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://www.transcen.com/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  auth_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: auth_proxy_exporter
    networks:
      - app_network
    depends_on:
      - auth_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://auth-proxy.transcen.com:8005/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  game_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: game_proxy_exporter
    networks:
      - app_network
    depends_on:
      - game_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://game-proxy.transcen.com:8004/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  tournament_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: tournament_proxy_exporter
    networks:
      - app_network
    depends_on:
      - tournament_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://tournament-proxy.transcen.com:8006/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  user_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: user_proxy_exporter
    networks:
      - app_network
    depends_on:
      - user_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://user-proxy.transcen.com:8009/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  friends_activity_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: friends_activity_proxy_exporter
    networks:
      - app_network
    depends_on:
      - friends_activity_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://friends-activity-proxy.transcen.com:10001/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  friends_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: friends_proxy_exporter
    networks:
      - app_network
    depends_on:
      - friends_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://friends-proxy.transcen.com:8007/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  match_proxy_exporter:
    image: nginx/nginx-prometheus-exporter:1.4
    container_name: match_proxy_exporter
    networks:
      - app_network
    depends_on:
      - match_proxy
    env_file: ./docker_env/exporter.env
    command:
      - '--nginx.scrape-uri=https://match-proxy.transcen.com:8008/nginx_status'
    volumes:
      - ./certs/ca.crt:/certs/ca.crt:ro

  friends_db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: friends_db_exporter
    networks:
      - app_network
    depends_on:
      - friends_db
    env_file: ./docker_env/friends.env

  user_db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: user_db_exporter
    networks:
      - app_network
    depends_on:
      - user_db
    env_file: ./docker_env/user.env

  auth_db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: auth_db_exporter
    networks:
      - app_network
    depends_on:
      - auth_db
    env_file: ./docker_env/auth.env

  tournament_db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: tournament_db_exporter
    networks:
      - app_network
    depends_on:
      - tournament_db
    env_file: ./docker_env/tournament.env

  match_db_exporter:
    image: prometheuscommunity/postgres-exporter:v0.17.1
    container_name: match_db_exporter
    networks:
      - app_network
    depends_on:
      - match_db
    env_file: ./docker_env/match.env

  game_redis_exporter:
    image: oliver006/redis_exporter:v1.70.0
    container_name: game_redis_exporter
    networks:
      - app_network
    depends_on:
      - game_redis
    env_file: ./docker_env/game.env

  auth_redis_exporter:
    image: oliver006/redis_exporter:v1.70.0
    container_name: auth_redis_exporter
    networks:
      - app_network
    depends_on:
      - auth_redis
    env_file: ./docker_env/auth.env

  tournament_redis_exporter:
    image: oliver006/redis_exporter:v1.70.0
    container_name: tournament_redis_exporter
    networks:
      - app_network
    depends_on:
      - tournament_redis
    env_file: ./docker_env/tournament.env

  match_redis_exporter:
    image: oliver006/redis_exporter:v1.70.0
    container_name: match_redis_exporter
    networks:
      - app_network
    depends_on:
      - match_redis
    env_file: ./docker_env/match.env

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    networks:
      - app_network
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    volumes:
      - ./monitoring/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ./docker_env/alert.url:/etc/alertmanager/alert.url:ro

  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    networks:
      - app_network
    depends_on:
      - spa_nginx_exporter
      - auth_proxy_exporter
      - game_proxy_exporter
      - tournament_proxy_exporter
      - user_proxy_exporter
      - friends_activity_proxy_exporter
      - friends_proxy_exporter
      - match_proxy_exporter
      - friends_db_exporter
      - user_db_exporter
      - auth_db_exporter
      - tournament_db_exporter
      - match_db_exporter
      - game_redis_exporter
      - alertmanager
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./monitoring/prometheus/alert.rules.yml:/etc/prometheus/alert.rules.yml

  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    ports:
      - "3000:3000"
    env_file: ./docker_env/grafana.env
    networks:
      - app_network
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./certs/grafana/server.crt:/certs/server.crt:ro
      - ./certs/grafana/server.key:/certs/server.key:ro
      - ./monitoring/grafana/dashboard.yml:/etc/grafana/provisioning/dashboards/dashboard.yml:ro
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:ro
      - ./monitoring/grafana/dashboard_nginx.json:/var/lib/grafana/dashboards/dashboard_nginx.json:ro
      - ./monitoring/grafana/dashboard_postgresql.json:/var/lib/grafana/dashboards/dashboard_postgresql.json:ro
      - ./monitoring/grafana/dashboard_redis.json:/var/lib/grafana/dashboards/dashboard_redis.json:ro
      - ./monitoring/grafana/dashboard_django.json:/var/lib/grafana/dashboards/dashboard_django.json:ro

networks:
  app_network:
    driver: bridge

volumes:
  auth_db_data:
  tournament_db_data:
  friends_db_data:
  user_db_data:
  match_db_data:
  user_media:
  prometheus_data:
  grafana_data:
